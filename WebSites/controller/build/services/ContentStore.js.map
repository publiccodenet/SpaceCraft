{"version":3,"file":"ContentStore.js","sourceRoot":"","sources":["../../src/services/ContentStore.ts"],"names":[],"mappings":"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","sourcesContent":["// Simple in-memory content/meta cache with de-duplication\n// Large/static data should be fetched via HTTP; presence carries only keys/hashes/urls\n\nexport type ContentKey = string;\nexport type MetaKey = string;\n\nexport type ContentRecord = {\n  hash: string;\n  indexUrl: string;\n  data: any;\n  fetchedAt: number;\n};\n\nexport type MetaRecord = {\n  hash: string;\n  url: string;\n  data: any;\n  fetchedAt: number;\n};\n\nclass ContentStore {\n  private contentByKey = new Map<ContentKey, ContentRecord>();\n  private metaByKey = new Map<MetaKey, MetaRecord>();\n  private inFlight = new Map<string, Promise<any>>();\n\n  async ensureContent(args: { contentKey?: string; contentHash?: string; contentIndexUrl?: string }): Promise<ContentRecord | null> {\n    const key = args.contentKey || args.contentIndexUrl || '';\n    if (!key) return null;\n    const hash = args.contentHash || '';\n    const url = args.contentIndexUrl || key;\n    const existing = this.contentByKey.get(key);\n    if (existing && existing.hash === hash && existing.data) return existing;\n    const flightKey = `content:${key}:${hash}`;\n    if (this.inFlight.has(flightKey)) return this.inFlight.get(flightKey)!;\n    const p = this.fetchJson(url).then((data) => {\n      const rec: ContentRecord = { hash, indexUrl: url, data, fetchedAt: Date.now() };\n      this.contentByKey.set(key, rec);\n      this.inFlight.delete(flightKey);\n      return rec;\n    }).catch((e) => {\n      this.inFlight.delete(flightKey);\n      throw e;\n    });\n    this.inFlight.set(flightKey, p);\n    return p;\n  }\n\n  async ensureUnityMeta(args: { unityMetaKey?: string; unityMetaHash?: string; unityMetaUrl?: string }): Promise<MetaRecord | null> {\n    const key = args.unityMetaKey || args.unityMetaUrl || '';\n    if (!key) return null;\n    const hash = args.unityMetaHash || '';\n    const url = args.unityMetaUrl || '';\n    const existing = this.metaByKey.get(key);\n    if (existing && existing.hash === hash && existing.data) return existing;\n    if (!url) return null;\n    const flightKey = `meta:${key}:${hash}`;\n    if (this.inFlight.has(flightKey)) return this.inFlight.get(flightKey)!;\n    const p = this.fetchJson(url).then((data) => {\n      const rec: MetaRecord = { hash, url, data, fetchedAt: Date.now() };\n      this.metaByKey.set(key, rec);\n      this.inFlight.delete(flightKey);\n      return rec;\n    }).catch((e) => {\n      this.inFlight.delete(flightKey);\n      throw e;\n    });\n    this.inFlight.set(flightKey, p);\n    return p;\n  }\n\n  getContent(contentKey?: string | null): ContentRecord | null {\n    if (!contentKey) return null;\n    return this.contentByKey.get(contentKey) || null;\n  }\n\n  getMeta(unityMetaKey?: string | null): MetaRecord | null {\n    if (!unityMetaKey) return null;\n    return this.metaByKey.get(unityMetaKey) || null;\n  }\n\n  prefetch(list: Array<{ contentKey: string; contentHash: string; contentIndexUrl: string }>) {\n    list.forEach((e) => this.ensureContent(e).catch(() => {}));\n  }\n\n  evictLRU(maxEntries = 4) {\n    if (this.contentByKey.size <= maxEntries) return;\n    const entries = Array.from(this.contentByKey.entries()).sort((a, b) => a[1].fetchedAt - b[1].fetchedAt);\n    while (entries.length > maxEntries) {\n      const [k] = entries.shift()!;\n      this.contentByKey.delete(k);\n    }\n  }\n\n  private async fetchJson(url: string) {\n    const res = await fetch(url, { headers: { 'Accept': 'application/json' } });\n    if (!res.ok) throw new Error(`Fetch failed ${res.status} ${url}`);\n    return res.json();\n  }\n}\n\nexport const contentStore = new ContentStore();\n\n\n"]}