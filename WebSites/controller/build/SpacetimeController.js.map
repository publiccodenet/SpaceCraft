{"version":3,"file":"SpacetimeController.js","sourceRoot":"","sources":["../src/SpacetimeController.ts"],"names":[],"mappings":"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","sourcesContent":["import { IoElement, Register, ioNavigator, MenuOption, Storage as $, ioMarkdown, ReactiveProperty, IoElementProps, ThemeSingleton } from 'io-gui';\nimport { tabNavigate } from './TabNavigate.js';\nimport { tabSelect } from './TabSelect.js';\nimport { tabInspect } from './TabInspect.js';\nimport { tabMagnet } from './TabMagnet.js';\nimport { tabAdjust } from './TabAdjust.js';\nimport { SimulatorState } from './SimulatorState.js';\nimport type { Magnet } from './types/Magnet';\n\nThemeSingleton.themeID = 'dark';\n\nfunction generateClientId() {\n    return 'controller-' + Math.random().toString(36).substr(2, 9);\n}\nfunction generateClientName() {\n    const now = new Date();\n    const timestamp = now.toISOString().replace(/[:.]/g, '-').slice(0, 19);\n    return `Controller-${timestamp}`;\n}\n\ntype PresenceState = {\n  [key: string]: Presence[];\n};\n\ntype Presence = {\n  clientId: string;\n  clientName: string;\n  clientType: string;\n  presence_ref: string;\n  startTime: number;\n}\n\ntype SimulatorPresence = {\n  clientId: string;\n  clientName: string;\n  clientType: string;\n  presence_ref: string;\n  shared: SimulatorState;\n  startTime: number;\n}\n\ntype SimulatorTakeoverPayload = {\n  newSimulatorId: string;\n  newSimulatorName: string;\n  startTime: number;\n}\n\nexport type ViewMetadata = {\n  canWrite: boolean;\n  category: string;\n  component: string;\n  defaultValue: any;\n  description: string;\n  displayName: string;\n  name: string;\n  path: string;\n  type: 'bool' | 'float' | 'string';\n  unityType: string;\n  min?: number,\n  max?: number,\n  step?: number,\n}\n\n@Register\nexport class SpacetimeController extends IoElement {\n    static get Style() {\n        return /* css */`\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n            :host > io-navigator {\n                flex: 1 1 auto;\n                overflow: hidden;\n            }\n    `;\n    }\n\n    static supabaseUrl = 'https://gwodhwyvuftyrvbymmvc.supabase.co';\n    static supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd3b2Rod3l2dWZ0eXJ2YnltbXZjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIzNDkyMDMsImV4cCI6MjA1NzkyNTIwM30.APVpyOupY84gQ7c0vBZkY-GqoJRPhb4oD4Lcj9CEzlc';\n    static clientChannelName = 'spacecraft';\n    static clientType = 'controller';\n\n    declare clientId: string;\n    declare clientName: string;\n    declare supabaseClient: any;\n    declare clientChannel: any;\n    declare clientConnected: boolean;\n    declare currentSimulatorId: string | null;\n    declare currentSimulators: Map<string, SimulatorPresence>;\n\n    declare magnetViewMetadata: Array<ViewMetadata>;\n\n    @ReactiveProperty({type: SimulatorState, init: null})\n    declare simulatorState: SimulatorState;\n\n    @ReactiveProperty({type: Number})\n    declare simulatorRosterTick: number;\n\n    constructor(props: IoElementProps) {\n        super(props);\n        // Client Identity\n        this.clientId = generateClientId();\n        this.clientName = generateClientName();\n\n        // Connection State\n        this.supabaseClient = null;\n        this.clientChannel = null;\n        this.clientConnected = false;\n        this.currentSimulatorId = null;\n        this.currentSimulators = new Map();\n        this.magnetViewMetadata = [];\n        this.simulatorRosterTick = 0;\n        this.connect();\n    }\n\n    connect() {\n        if (typeof supabase === 'undefined') {\n            console.error('Supabase library missing!');\n            return;\n        }\n        try {\n            const params = new URLSearchParams(window.location.search);\n            const channelName = params.get('channel') || SpacetimeController.clientChannelName;\n            this.supabaseClient = supabase.createClient(SpacetimeController.supabaseUrl, SpacetimeController.supabaseAnonKey);\n            this.clientChannel = this.supabaseClient.channel(channelName, {\n                config: { presence: { key: this.clientId } }\n            });\n            this.setupPresenceHandlers();\n            this.subscribeToChannel();\n            // Only honor simulatorIndex param (no legacy)\n            const simIndexFromUrl = params.get('simulatorIndex');\n            if (simIndexFromUrl) {\n                (this as any)._preselectSimulatorIndex = parseInt(simIndexFromUrl, 10);\n            }\n        } catch (error) {\n            console.error('Controller connection failed:', error);\n            console.error('[Controller] Connection failed:', error);\n        }\n    }\n\n    \n    ready() {\n        this.render([\n            ioNavigator({\n                menu: 'top',\n                caching: 'proactive',\n                option: new MenuOption({\n                    id: 'root',\n                    options: [\n                        {id: 'About', icon: '📖'},\n                        {id: 'Navigate', icon: '🧭'},\n                        {id: 'Select', icon: '👆'},\n                        {id: 'Inspect', icon: '🔍'},\n                        {id: 'Magnet', icon: '🧲'},\n                        {id: 'Adjust', icon: '⚙️'},\n                    ],\n                    selectedID: $({key: 'page', storage: 'hash', value: 'About'})\n                }),\n                elements: [\n                    ioMarkdown({id: 'About', src: './docs/About.md'}),\n                    tabNavigate({id: 'Navigate', controller: this, simulatorState: this.simulatorState}),\n                    tabSelect({id: 'Select', controller: this, simulatorState: this.simulatorState}),\n                    tabInspect({id: 'Inspect', controller: this, simulatorState: this.simulatorState}),\n                    tabMagnet({id: 'Magnet', controller: this, simulatorState: this.simulatorState}),\n                    tabAdjust({id: 'Adjust', controller: this, simulatorState: this.simulatorState}),\n                ]\n            })\n        ]);\n    }\n\n    // === UNITY COMMUNICATION ===\n\n    sendPanEvent(deltaX: number, deltaY: number) {\n        this.sendEventToSimulator('pan', { panXDelta: deltaX, panYDelta: deltaY });\n    }\n\n    sendZoomEvent(zoomDelta: number) {\n        this.sendEventToSimulator('zoom', { zoomDelta });\n    }\n\n    sendSelectEvent(action: string) {\n        this.sendEventToSimulator('select', { action });\n    }\n\n    sendCreateMagnetEvent(magnetData: Magnet) {\n        try {\n            console.log('[Controller] sendCreateMagnetEvent magnetData:', JSON.parse(JSON.stringify(magnetData)));\n        } catch (e) {\n            console.log('[Controller] sendCreateMagnetEvent magnetData (raw):', magnetData);\n        }\n        this.sendEventToSimulator('createMagnet', { magnetData });\n    }\n\n    sendUpdateMagnetEvent(magnetData: Magnet) {\n        this.sendEventToSimulator('updateMagnet', { magnetData });\n    }\n\n    sendDeleteMagnetEvent(magnetId: string) {\n        this.sendEventToSimulator('deleteMagnet', { magnetId });\n    }\n\n    sendPushMagnetEvent(magnetId: string, deltaX: number, deltaY: number) {\n        this.sendEventToSimulator('pushMagnet', { magnetId, deltaX, deltaY });\n    }\n\n    sendEventToSimulator(eventType: string, data: any) {\n        if (!this.clientChannel) {\n            console.error('[Controller] Cannot send event - no client channel');\n            return;\n        }\n\n        if (!this.currentSimulatorId) {\n            console.error('[Controller] Cannot send event - no current simulator ID');\n            return;\n        }\n\n        const payload = {\n            clientId: this.clientId,\n            clientType: SpacetimeController.clientType,\n            clientName: this.clientName,\n            screenId: 'main',\n            targetSimulatorId: this.currentSimulatorId,\n            ...data\n        };\n\n        this.clientChannel.send({\n            type: 'broadcast',\n            event: eventType,\n            payload: payload\n        }).catch((err: any) => {\n            console.error(`[Controller] Send '${eventType}' failed:`, err);\n        });\n    }\n\n    setupPresenceHandlers() {\n        this.clientChannel\n            .on('presence', { event: 'sync' }, () => {\n                const presenceState = this.clientChannel.presenceState();\n                try {\n                    const raw = Object.values(presenceState || {}).flat();\n                    const sims = raw.filter((p: any) => p && p.clientType === 'simulator');\n                    console.log('[Controller][presence:sync] presences:', raw.length, 'simulators:', sims.length);\n                    console.log('[Controller][presence:sync] simulators raw:', sims.map((p: any) => ({\n                        clientId: p.clientId,\n                        nameTop: p.clientName,\n                        nameShared: p.shared && p.shared.clientName,\n                        idxTop: typeof p.simulatorIndex === 'number' ? p.simulatorIndex : 0,\n                        idxShared: p.shared && typeof p.shared.simulatorIndex === 'number' ? p.shared.simulatorIndex : 0\n                    })));\n                } catch {}\n\n                const simulator = this.findSimulator(presenceState);\n                \n                if (simulator) {\n                    // If preselect by index requested, override with match when available\n                    if ((this as any)._preselectSimulatorIndex) {\n                        for (const sim of this.currentSimulators.values()) {\n                            const idx = (sim as any).simulatorIndex || ((sim as any).shared && (sim as any).shared.simulatorIndex);\n                            if (idx === (this as any)._preselectSimulatorIndex) {\n                                this.currentSimulatorId = (sim as any).clientId;\n                                break;\n                            }\n                        }\n                        (this as any)._preselectSimulatorIndex = null;\n                    }\n                    this.magnetViewMetadata = (simulator.shared as any).unityMetaData?.MagnetView || [];\n                    this.currentSimulatorId = this.currentSimulatorId || simulator.clientId;\n                    this.simulatorState.update(simulator.shared);\n                    // bump tick so UI re-renders simulator menus\n                    this.simulatorRosterTick = (this.simulatorRosterTick || 0) + 1;\n                    try {\n                        const list = Array.from(this.currentSimulators.values()).map((s: any) => ({\n                            clientId: s.clientId,\n                            clientName: s.clientName || (s.shared && s.shared.clientName),\n                            simulatorIndex: s.simulatorIndex || (s.shared && s.shared.simulatorIndex)\n                        }));\n                        console.log('[Controller] roster updated (tick', this.simulatorRosterTick, '):', list);\n                        console.log('[Controller] currentSimulatorId:', this.currentSimulatorId);\n                    } catch {}\n                } else {\n                    // No simulator selected yet; still bump tick to refresh menu state\n                    this.simulatorRosterTick = (this.simulatorRosterTick || 0) + 1;\n                }\n            });\n    }\n\n    subscribeToChannel() {\n        this.clientChannel.subscribe(async (status: string) => {\n            if (status === 'SUBSCRIBED') {\n                this.clientConnected = true;\n                await this.clientChannel.track({\n                    clientId: this.clientId,\n                    clientType: SpacetimeController.clientType,\n                    clientName: this.clientName,\n                    startTime: Date.now()\n                });\n            }\n        });\n    }\n\n    setCurrentSimulator(simId: string) {\n        this.currentSimulatorId = simId;\n        if (!this.clientChannel) return;\n        // Pull fresh presence state from Supabase and switch to the selected simulator's state\n        const presenceState = this.clientChannel.presenceState();\n        const sim = this.findSimulator(presenceState);\n        if (sim) {\n            this.magnetViewMetadata = (sim.shared as any).unityMetaData?.MagnetView || [];\n            this.simulatorState.update(sim.shared);\n        }\n        try {\n            const sel = this.currentSimulators.get(simId) as any;\n            console.log('[Controller] setCurrentSimulator:', simId, 'name=', sel && (sel.clientName || (sel.shared && sel.shared.clientName)), 'index=', sel && (sel.simulatorIndex || (sel.shared && sel.shared.simulatorIndex)));\n        } catch {}\n        // Persist simulatorIndex in URL\n        try {\n            const selected = this.currentSimulators.get(simId) as any;\n            const simIndex = selected && (selected.simulatorIndex || (selected.shared && selected.shared.simulatorIndex));\n            if (simIndex) {\n                const url = new URL(window.location.href);\n                url.searchParams.set('simulatorIndex', String(simIndex));\n                window.history.replaceState({}, '', url.toString());\n                console.log('[Controller] URL simulatorIndex set to', simIndex);\n            }\n        } catch {}\n    }\n\n    async updatePresenceState() {\n        if (this.clientConnected && this.clientChannel) {\n            try {\n                await this.clientChannel.track({\n                    clientId: this.clientId,\n                    clientType: SpacetimeController.clientType,\n                    clientName: this.clientName,\n                    startTime: Date.now()\n                });\n            } catch (error) {\n                console.error('[Connection] Failed to update presence:', error);\n            }\n        }\n    }\n\n    findSimulator(presenceState: PresenceState): SimulatorPresence | null {\n        let lastSimulator: SimulatorPresence | null = null;\n        let simulator: SimulatorPresence | null = null;\n        const values = Object.values(presenceState);\n        this.currentSimulators = new Map();\n        for (const presences of values) {\n            for (const presence of presences as Presence[]) {\n                // Only count fully-initialized simulators (index assigned)\n                const meta: any = presence as any;\n                const simIndexTop = typeof meta.simulatorIndex === 'number' ? meta.simulatorIndex : 0;\n                const simIndexShared = meta.shared && typeof meta.shared.simulatorIndex === 'number' ? meta.shared.simulatorIndex : 0;\n                const simIndex = simIndexTop || simIndexShared;\n                if (meta.clientType === 'simulator' && simIndex > 0) {\n                    // Prefer shared view of fields if available\n                    const merged: any = {\n                        ...meta,\n                        clientName: (meta.shared && meta.shared.clientName) ? meta.shared.clientName : meta.clientName,\n                        simulatorIndex: simIndex,\n                        shared: meta.shared || {}\n                    };\n                    lastSimulator = merged as SimulatorPresence;\n                    this.currentSimulators.set(meta.clientId, merged as SimulatorPresence);\n                    if (meta.clientId == this.currentSimulatorId) {\n                        simulator = lastSimulator;\n                    }\n                } else if (meta.clientType === 'simulator') {\n                    console.log('[Controller] ignoring simulator without index yet:', {\n                        clientId: meta.clientId,\n                        nameTop: meta.clientName,\n                        nameShared: meta.shared && meta.shared.clientName,\n                        idxTop: simIndexTop,\n                        idxShared: simIndexShared\n                    });\n                }\n            }\n        }\n        if (!simulator) {\n            simulator = lastSimulator;\n        }\n        this.currentSimulatorId = simulator?.clientId || null;\n        try {\n            const list = Array.from(this.currentSimulators.values()).map((s: any) => ({\n                clientId: s.clientId,\n                clientName: s.clientName || (s.shared && s.shared.clientName),\n                simulatorIndex: s.simulatorIndex || (s.shared && s.shared.simulatorIndex)\n            }));\n            console.log('[Controller] currentSimulators:', list);\n        } catch {}\n        return simulator;\n    }\n}\n"]}