//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CraftSpace Schema Generator.
//     Runtime Version: 1.0
//
//     ██████╗  ██████╗     ███╗   ██╗ ██████╗ ████████╗    ███████╗██████╗ ██╗████████╗
//     ██╔══██╗██╔═══██╗    ████╗  ██║██╔═══██╗╚══██╔══╝    ██╔════╝██╔══██╗██║╚══██╔══╝
//     ██║  ██║██║   ██║    ██╔██╗ ██║██║   ██║   ██║       █████╗  ██║  ██║██║   ██║   
//     ██║  ██║██║   ██║    ██║╚██╗██║██║   ██║   ██║       ██╔══╝  ██║  ██║██║   ██║   
//     ██████╔╝╚██████╔╝    ██║ ╚████║╚██████╔╝   ██║       ███████╗██████╔╝██║   ██║   
//     ╚═════╝  ╚═════╝     ╚═╝  ╚═══╝ ╚═════╝    ╚═╝       ╚══════╝╚═════╝ ╚═╝   ╚═╝   
//
//     CRITICAL WARNING: THIS FILE IS AUTO-GENERATED
//     DO NOT MODIFY THIS FILE DIRECTLY UNDER ANY CIRCUMSTANCES
//
//     Path: Unity/CraftSpace/Assets/Scripts/Schemas/Generated/CollectionSchema.cs
//
//     If this file needs to be updated:
//     1. NEVER modify this generated file directly
//     2. ALWAYS modify the schema generator: Unity/CraftSpace/Assets/Editor/SchemaGenerator/SchemaGenerator.cs
//     3. Update schema definitions in SvelteKit/BackSpace/src/lib/schemas/
//     4. Run npm run schema:export in SvelteKit/BackSpace directory
//     5. Regenerate using CraftSpace > Schema Generator in Unity
//
//     Any changes made directly to this file WILL BE LOST when regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEngine;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;

[System.Serializable]
public class CollectionSchema : SchemaGeneratedObject
{
    // WARNING: This is an auto-generated class. DO NOT MODIFY DIRECTLY.
    // If changes are needed, modify the schema generator instead.

    /// <summary>
    /// Unique identifier for the collection
    /// Schema Path: id
    /// </summary>
    [SerializeField] private string _id = string.Empty;
    public override string Id { get { return _id; } set { _id = value; } }

    /// <summary>
    /// Primary display title for the collection
    /// Schema Path: title
    /// UnitySchemaConverter: StringOrNullToStringConverter
    /// </summary>
    [SerializeField] private string _title = string.Empty;
    public string Title { get { return _title; } set { _title = value; } }

    /// <summary>
    /// Optional description for the collection
    /// Schema Path: description
    /// UnitySchemaConverter: StringOrNullToStringConverter
    /// </summary>
    [SerializeField] private string _description = string.Empty;
    public string Description { get { return _description; } set { _description = value; } }

    /// <summary>
    /// Creator(s) of this collection.
    /// Schema Path: creator
    /// UnitySchemaConverter: StringArrayOrNullToStringArrayConverter
    /// </summary>
    [SerializeField] private string _creator = string.Empty;
    public string Creator { get { return _creator; } set { _creator = value; } }

    /// <summary>
    /// Subject tags for this collection.
    /// Schema Path: subject
    /// UnitySchemaConverter: StringArrayOrNullToStringArrayConverter
    /// </summary>
    [SerializeField] private string _subject = string.Empty;
    public string Subject { get { return _subject; } set { _subject = value; } }

    /// <summary>
    /// Type of media (always "collection" for collections).
    /// Schema Path: mediatype
    /// UnitySchemaConverter: StringOrNullToStringConverter
    /// </summary>
    [SerializeField] private string _mediatype = string.Empty;
    public string Mediatype { get { return _mediatype; } set { _mediatype = value; } }

    /// <summary>
    /// URL or path to the cover image.
    /// Schema Path: coverImage
    /// UnitySchemaConverter: StringOrNullToStringConverter
    /// </summary>
    [SerializeField] private string _coverImage = string.Empty;
    public string CoverImage { get { return _coverImage; } set { _coverImage = value; } }

    /// <summary>
    /// The query used to populate this collection (e.g., from an external API)
    /// Schema Path: query
    /// UnitySchemaConverter: StringOrArrayOrNullToStringConverter
    /// </summary>
    [SerializeField] private string _query = string.Empty;
    public string Query { get { return _query; } set { _query = value; } }

    protected override void ImportKnownProperties(JObject json)
    {
        // Processing property 'id'
        if (json["id"] != null)
        {
            try
            {
                _id = json["id"].ToString();
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'id' directly: {ex.Message}"); }
        }

        // Processing property 'title'
        if (json["title"] != null)
        {
            try
            {
                _title = json["title"].ToString();
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'title' directly: {ex.Message}"); }
        }

        // Processing property 'description'
        if (json["description"] != null)
        {
            try
            {
                _description = json["description"].ToString();
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'description' directly: {ex.Message}"); }
        }

        // Processing property 'creator'
        if (json["creator"] != null)
        {
            try
            {
                _creator = json["creator"].ToString();
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'creator' directly: {ex.Message}"); }
        }

        // Processing property 'subject'
        if (json["subject"] != null)
        {
            try
            {
                _subject = json["subject"].ToString();
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'subject' directly: {ex.Message}"); }
        }

        // Processing property 'mediatype'
        if (json["mediatype"] != null)
        {
            try
            {
                _mediatype = json["mediatype"].ToString();
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'mediatype' directly: {ex.Message}"); }
        }

        // Processing property 'coverImage'
        if (json["coverImage"] != null)
        {
            try
            {
                _coverImage = json["coverImage"].ToString();
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'coverImage' directly: {ex.Message}"); }
        }

        // Processing property 'query'
        if (json["query"] != null)
        {
            try
            {
                _query = json["query"].ToString();
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'query' directly: {ex.Message}"); }
        }

    }

    protected override JObject ExportKnownProperties()
    {
        var json = new JObject();
        // Processing property 'id'
        if (_id != null)
        {
            try
            {
                json["id"] = JToken.FromObject(_id); // Basic types can use FromObject safely
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'id' directly: {ex.Message}"); }
        }

        // Processing property 'title'
        if (_title != null)
        {
            try
            {
                json["title"] = JToken.FromObject(_title); // Basic types can use FromObject safely
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'title' directly: {ex.Message}"); }
        }

        // Processing property 'description'
        if (_description != null)
        {
            try
            {
                json["description"] = JToken.FromObject(_description); // Basic types can use FromObject safely
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'description' directly: {ex.Message}"); }
        }

        // Processing property 'creator'
        if (_creator != null)
        {
            try
            {
                json["creator"] = JToken.FromObject(_creator); // Basic types can use FromObject safely
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'creator' directly: {ex.Message}"); }
        }

        // Processing property 'subject'
        if (_subject != null)
        {
            try
            {
                json["subject"] = JToken.FromObject(_subject); // Basic types can use FromObject safely
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'subject' directly: {ex.Message}"); }
        }

        // Processing property 'mediatype'
        if (_mediatype != null)
        {
            try
            {
                json["mediatype"] = JToken.FromObject(_mediatype); // Basic types can use FromObject safely
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'mediatype' directly: {ex.Message}"); }
        }

        // Processing property 'coverImage'
        if (_coverImage != null)
        {
            try
            {
                json["coverImage"] = JToken.FromObject(_coverImage); // Basic types can use FromObject safely
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'coverImage' directly: {ex.Message}"); }
        }

        // Processing property 'query'
        if (_query != null)
        {
            try
            {
                json["query"] = JToken.FromObject(_query); // Basic types can use FromObject safely
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'query' directly: {ex.Message}"); }
        }

        return json;
    }

    protected override bool HasDefinedProperty(string name)
    {
        switch (name)
        {
            case "id":
            case "title":
            case "description":
            case "creator":
            case "subject":
            case "mediatype":
            case "coverImage":
            case "query":
            case "extraFields":
                return true;
            default:
                return false;
        }
    }
}
