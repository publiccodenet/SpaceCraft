//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CraftSpace Schema Generator.
//     Runtime Version: 1.0
//
//     ██████╗  ██████╗     ███╗   ██╗ ██████╗ ████████╗    ███████╗██████╗ ██╗████████╗
//     ██╔══██╗██╔═══██╗    ████╗  ██║██╔═══██╗╚══██╔══╝    ██╔════╝██╔══██╗██║╚══██╔══╝
//     ██║  ██║██║   ██║    ██╔██╗ ██║██║   ██║   ██║       █████╗  ██║  ██║██║   ██║   
//     ██║  ██║██║   ██║    ██║╚██╗██║██║   ██║   ██║       ██╔══╝  ██║  ██║██║   ██║   
//     ██████╔╝╚██████╔╝    ██║ ╚████║╚██████╔╝   ██║       ███████╗██████╔╝██║   ██║   
//     ╚═════╝  ╚═════╝     ╚═╝  ╚═══╝ ╚═════╝    ╚═╝       ╚══════╝╚═════╝ ╚═╝   ╚═╝   
//
//     CRITICAL WARNING: THIS FILE IS AUTO-GENERATED
//     DO NOT MODIFY THIS FILE DIRECTLY UNDER ANY CIRCUMSTANCES
//
//     Path: Unity/CraftSpace/Assets/Scripts/Schemas/Generated/ItemSchema.cs
//
//     If this file needs to be updated:
//     1. NEVER modify this generated file directly
//     2. ALWAYS modify the schema generator: Unity/CraftSpace/Assets/Editor/SchemaGenerator/SchemaGenerator.cs
//     3. Update schema definitions in SvelteKit/BackSpace/src/lib/schemas/
//     4. Run  npm run schemas:export in SvelteKit/BackSpace directory
//     5. Regenerate using CraftSpace > Schema Generator in Unity
//
//     Any changes made directly to this file WILL BE LOST when regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEngine;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;

[System.Serializable]
public class ItemSchema : SchemaGeneratedObject
{
    // WARNING: This is an auto-generated class. DO NOT MODIFY DIRECTLY.
    // If changes are needed, modify the schema generator instead.

    /// <summary>
    /// Unique identifier for the item.
    /// Schema Path: id
    /// UnitySchemaConverter: StringOrNullToStringConverter
    /// </summary>
    [SerializeField] private string _id = string.Empty;
    public override string Id { get { return _id; } set { _id = value; } }

    /// <summary>
    /// Title of the item.
    /// Schema Path: title
    /// UnitySchemaConverter: StringOrNullToStringConverter
    /// </summary>
    [SerializeField] private string _title = string.Empty;
    public string Title { get { return _title; } set { _title = value; } }

    /// <summary>
    /// Description of the item.
    /// Schema Path: description
    /// UnitySchemaConverter: StringArrayOrStringOrNullToStringConverter
    /// </summary>
    [SerializeField] private string _description = string.Empty;
    public string Description { get { return _description; } set { _description = value; } }

    /// <summary>
    /// Creator/author of the item.
    /// Schema Path: creator
    /// UnitySchemaConverter: StringOrNullToStringConverter
    /// </summary>
    [SerializeField] private string _creator = string.Empty;
    public string Creator { get { return _creator; } set { _creator = value; } }

    /// <summary>
    /// Subject tags for this item.
    /// Schema Path: subject
    /// UnitySchemaConverter: SemicolonSplitStringOrStringArrayOrNullToStringArrayConverter
    /// </summary>
    [SerializeField] private string _subject = string.Empty;
    public string Subject { get { return _subject; } set { _subject = value; } }

    /// <summary>
    /// Collections this item belongs to.
    /// Schema Path: collection
    /// UnitySchemaConverter: StringArrayOrStringOrNullToStringArrayConverter
    /// </summary>
    [SerializeField] private string _collection = string.Empty;
    public string Collection { get { return _collection; } set { _collection = value; } }

    /// <summary>
    /// Type of media (texts, movies, audio, etc).
    /// Schema Path: mediatype
    /// UnitySchemaConverter: StringOrNullToStringConverter
    /// </summary>
    [SerializeField] private string _mediatype = string.Empty;
    public string Mediatype { get { return _mediatype; } set { _mediatype = value; } }

    /// <summary>
    /// URL or path to the cover image.
    /// Schema Path: coverImage
    /// UnitySchemaConverter: StringOrNullToStringConverter
    /// </summary>
    [SerializeField] private string _coverImage = string.Empty;
    public string CoverImage { get { return _coverImage; } set { _coverImage = value; } }

    /// <summary>
    /// Width of the cover image in pixels.
    /// Schema Path: coverWidth
    /// UnitySchemaConverter: StringOrNumberOrNullToNumberConverter
    /// </summary>
    [SerializeField] private float _coverWidth = 0f;
    public float CoverWidth { get { return _coverWidth; } set { _coverWidth = value; } }

    /// <summary>
    /// Height of the cover image in pixels.
    /// Schema Path: coverHeight
    /// UnitySchemaConverter: StringOrNumberOrNullToNumberConverter
    /// </summary>
    [SerializeField] private float _coverHeight = 0f;
    public float CoverHeight { get { return _coverHeight; } set { _coverHeight = value; } }

    protected override void ImportKnownProperties(JObject json)
    {
        // Use converter: StringOrNullToStringConverter
        if (json["id"] != null)
        {
            try
            {
                var converter = new StringOrNullToStringConverter();
                _id = (string)converter.ReadJson(json["id"].CreateReader(), typeof(string), null, null);
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'id' with StringOrNullToStringConverter: {ex.Message}"); }
        }

        // Use converter: StringOrNullToStringConverter
        if (json["title"] != null)
        {
            try
            {
                var converter = new StringOrNullToStringConverter();
                _title = (string)converter.ReadJson(json["title"].CreateReader(), typeof(string), null, null);
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'title' with StringOrNullToStringConverter: {ex.Message}"); }
        }

        // Use converter: StringArrayOrStringOrNullToStringConverter
        if (json["description"] != null)
        {
            try
            {
                var converter = new StringArrayOrStringOrNullToStringConverter();
                _description = (string)converter.ReadJson(json["description"].CreateReader(), typeof(string), null, null);
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'description' with StringArrayOrStringOrNullToStringConverter: {ex.Message}"); }
        }

        // Use converter: StringOrNullToStringConverter
        if (json["creator"] != null)
        {
            try
            {
                var converter = new StringOrNullToStringConverter();
                _creator = (string)converter.ReadJson(json["creator"].CreateReader(), typeof(string), null, null);
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'creator' with StringOrNullToStringConverter: {ex.Message}"); }
        }

        // Use converter: SemicolonSplitStringOrStringArrayOrNullToStringArrayConverter
        if (json["subject"] != null)
        {
            try
            {
                var converter = new SemicolonSplitStringOrStringArrayOrNullToStringArrayConverter();
                _subject = (string)converter.ReadJson(json["subject"].CreateReader(), typeof(string), null, null);
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'subject' with SemicolonSplitStringOrStringArrayOrNullToStringArrayConverter: {ex.Message}"); }
        }

        // Use converter: StringArrayOrStringOrNullToStringArrayConverter
        if (json["collection"] != null)
        {
            try
            {
                var converter = new StringArrayOrStringOrNullToStringArrayConverter();
                _collection = (string)converter.ReadJson(json["collection"].CreateReader(), typeof(string), null, null);
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'collection' with StringArrayOrStringOrNullToStringArrayConverter: {ex.Message}"); }
        }

        // Use converter: StringOrNullToStringConverter
        if (json["mediatype"] != null)
        {
            try
            {
                var converter = new StringOrNullToStringConverter();
                _mediatype = (string)converter.ReadJson(json["mediatype"].CreateReader(), typeof(string), null, null);
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'mediatype' with StringOrNullToStringConverter: {ex.Message}"); }
        }

        // Use converter: StringOrNullToStringConverter
        if (json["coverImage"] != null)
        {
            try
            {
                var converter = new StringOrNullToStringConverter();
                _coverImage = (string)converter.ReadJson(json["coverImage"].CreateReader(), typeof(string), null, null);
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'coverImage' with StringOrNullToStringConverter: {ex.Message}"); }
        }

        // Use converter: StringOrNumberOrNullToNumberConverter
        if (json["coverWidth"] != null)
        {
            try
            {
                var converter = new StringOrNumberOrNullToNumberConverter();
                _coverWidth = (float)converter.ReadJson(json["coverWidth"].CreateReader(), typeof(float), null, null);
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'coverWidth' with StringOrNumberOrNullToNumberConverter: {ex.Message}"); }
        }

        // Use converter: StringOrNumberOrNullToNumberConverter
        if (json["coverHeight"] != null)
        {
            try
            {
                var converter = new StringOrNumberOrNullToNumberConverter();
                _coverHeight = (float)converter.ReadJson(json["coverHeight"].CreateReader(), typeof(float), null, null);
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'coverHeight' with StringOrNumberOrNullToNumberConverter: {ex.Message}"); }
        }

    }

    protected override JObject ExportKnownProperties()
    {
        var json = new JObject();
        // Use converter: StringOrNullToStringConverter
        if (_id != null)
        {
            try
            {
                var tempWriter = new JTokenWriter();
                var converter = new StringOrNullToStringConverter();
                converter.WriteJson(tempWriter, _id, null);
                json["id"] = tempWriter.Token;
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'id' with StringOrNullToStringConverter: {ex.Message}"); }
        }

        // Use converter: StringOrNullToStringConverter
        if (_title != null)
        {
            try
            {
                var tempWriter = new JTokenWriter();
                var converter = new StringOrNullToStringConverter();
                converter.WriteJson(tempWriter, _title, null);
                json["title"] = tempWriter.Token;
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'title' with StringOrNullToStringConverter: {ex.Message}"); }
        }

        // Use converter: StringArrayOrStringOrNullToStringConverter
        if (_description != null)
        {
            try
            {
                var tempWriter = new JTokenWriter();
                var converter = new StringArrayOrStringOrNullToStringConverter();
                converter.WriteJson(tempWriter, _description, null);
                json["description"] = tempWriter.Token;
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'description' with StringArrayOrStringOrNullToStringConverter: {ex.Message}"); }
        }

        // Use converter: StringOrNullToStringConverter
        if (_creator != null)
        {
            try
            {
                var tempWriter = new JTokenWriter();
                var converter = new StringOrNullToStringConverter();
                converter.WriteJson(tempWriter, _creator, null);
                json["creator"] = tempWriter.Token;
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'creator' with StringOrNullToStringConverter: {ex.Message}"); }
        }

        // Use converter: SemicolonSplitStringOrStringArrayOrNullToStringArrayConverter
        if (_subject != null)
        {
            try
            {
                var tempWriter = new JTokenWriter();
                var converter = new SemicolonSplitStringOrStringArrayOrNullToStringArrayConverter();
                converter.WriteJson(tempWriter, _subject, null);
                json["subject"] = tempWriter.Token;
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'subject' with SemicolonSplitStringOrStringArrayOrNullToStringArrayConverter: {ex.Message}"); }
        }

        // Use converter: StringArrayOrStringOrNullToStringArrayConverter
        if (_collection != null)
        {
            try
            {
                var tempWriter = new JTokenWriter();
                var converter = new StringArrayOrStringOrNullToStringArrayConverter();
                converter.WriteJson(tempWriter, _collection, null);
                json["collection"] = tempWriter.Token;
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'collection' with StringArrayOrStringOrNullToStringArrayConverter: {ex.Message}"); }
        }

        // Use converter: StringOrNullToStringConverter
        if (_mediatype != null)
        {
            try
            {
                var tempWriter = new JTokenWriter();
                var converter = new StringOrNullToStringConverter();
                converter.WriteJson(tempWriter, _mediatype, null);
                json["mediatype"] = tempWriter.Token;
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'mediatype' with StringOrNullToStringConverter: {ex.Message}"); }
        }

        // Use converter: StringOrNullToStringConverter
        if (_coverImage != null)
        {
            try
            {
                var tempWriter = new JTokenWriter();
                var converter = new StringOrNullToStringConverter();
                converter.WriteJson(tempWriter, _coverImage, null);
                json["coverImage"] = tempWriter.Token;
            }
            catch (Exception ex) { Debug.LogError($"Error converting 'coverImage' with StringOrNullToStringConverter: {ex.Message}"); }
        }

        // Use converter: StringOrNumberOrNullToNumberConverter
        try
        {
            var tempWriter = new JTokenWriter();
            var converter = new StringOrNumberOrNullToNumberConverter();
            converter.WriteJson(tempWriter, _coverWidth, null);
            json["coverWidth"] = tempWriter.Token;
        }
        catch (Exception ex) { Debug.LogError($"Error converting 'coverWidth' with StringOrNumberOrNullToNumberConverter: {ex.Message}"); }

        // Use converter: StringOrNumberOrNullToNumberConverter
        try
        {
            var tempWriter = new JTokenWriter();
            var converter = new StringOrNumberOrNullToNumberConverter();
            converter.WriteJson(tempWriter, _coverHeight, null);
            json["coverHeight"] = tempWriter.Token;
        }
        catch (Exception ex) { Debug.LogError($"Error converting 'coverHeight' with StringOrNumberOrNullToNumberConverter: {ex.Message}"); }

        return json;
    }

    protected override bool HasDefinedProperty(string name)
    {
        switch (name)
        {
            case "id":
            case "title":
            case "description":
            case "creator":
            case "subject":
            case "collection":
            case "mediatype":
            case "coverImage":
            case "coverWidth":
            case "coverHeight":
            case "extraFields":
                return true;
            default:
                return false;
        }
    }
}
